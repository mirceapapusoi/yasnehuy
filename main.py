import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import random
import time
from datetime import datetime, timedelta
import asyncio
import re
import matplotlib.pyplot as plt
import io
import aiohttp
from collections import defaultdict

# Cooldowns
message_cooldowns = defaultdict(float)
action_cooldowns = defaultdict(lambda: defaultdict(float))
MESSAGE_COOLDOWN = 2.5
ACTION_COOLDOWN = 3600  # 60 minutes
BOOBS_COOLDOWN = 3600  # 60 minutes

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7632023422:AAFvrAScl0hO_Cq0bbvMWeMUJKuxjuWUSME'
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

users_db = {}
chat_states = {}
warns = {}
admins = {1336991712}  # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
marriages = {}
clans = {}
achievements = {}
user_inventory = {}
pets = {}
nsfw_actions = {}
user_languages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_rewards = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
weather_api_key = "d9ca78488c57662e41f7a674e3af55cf"  # OpenWeatherMap API key

DEFAULT_LANG = 'ru'

async def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api_key}&units=metric&lang=ru"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                if str(data.get("cod", "")) != "200":
                    return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

                weather = {
                    'temp': round(data['main']['temp']),
                    'feels_like': round(data['main']['feels_like']),
                    'humidity': data['main']['humidity'],
                    'wind_speed': data['wind']['speed'],
                    'description': data['weather'][0]['description'],
                }

                return f"""üå° –ü–æ–≥–æ–¥–∞ {city}

‚òÅÔ∏è –°–µ–π—á–∞—Å: +{weather['temp']}¬∞ | {weather['description']}
üßñ‚Äç‚ôÇÔ∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: +{weather['feels_like']}¬∞
‚ÜñÔ∏è –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å
üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%"""
    except Exception as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã"

def get_text(key, lang):
    texts = {
        'stats': {
            'ru': "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {}:\n",
            'en': "üìä Statistics for {}:\n"
        },
        'messages': {
            'ru': "–°–æ–æ–±—â–µ–Ω–∏–π: {}\n",
            'en': "Messages: {}\n"
        },
        'karma': {
            'ru': "–ö–∞—Ä–º–∞: {}\n",
            'en': "Karma: {}\n"
        },
        'dick': {
            'ru': "–†–∞–∑–º–µ—Ä —á–ª–µ–Ω–∞: {}—Å–º\n",
            'en': "Dick size: {}cm\n"
        },
        'boobs': {
            'ru': "–†–∞–∑–º–µ—Ä –≥—Ä—É–¥–∏: {}\n",
            'en': "Boobs size: {}\n"
        }
    }
    return texts.get(key, {}).get(lang, texts[key]['ru'])

async def generate_stats_image(user_data):
    plt.clf()
    plt.style.use('dark_background')
    fig = plt.figure(figsize=(10, 6))
    plt.rcParams['figure.facecolor'] = '#36393F'
    plt.rcParams['axes.facecolor'] = '#2F3136'

    # Create main graph
    plt.subplot(2, 2, 1)
    plt.bar(['Messages'], [user_data['messages']], color='#00ff00')
    plt.title('Messages')

    # Create karma graph
    plt.subplot(2, 2, 2)
    plt.bar(['Karma'], [user_data['karma']], color='#ff00ff')
    plt.title('Karma')

    # Create level progress
    plt.subplot(2, 2, 3)
    plt.pie([user_data['exp'], 100-user_data['exp']], 
            colors=['#00ff00', '#333333'],
            labels=[f'{user_data["exp"]}%', ''],
            autopct='%1.1f%%')
    plt.title(f'Level {user_data["level"]} Progress')

    # Create additional stats
    plt.subplot(2, 2, 4)
    stats = [user_data.get('dick_size', 0), user_data.get('boobs_size', 0)]
    plt.bar(['üçÜ', 'üçà'], stats, color=['#ff0000', '#ff69b4'])
    plt.title('Body Stats')

    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png', facecolor='#36393F')
    buf.seek(0)
    return buf

@dp.message(Command('start', 'menu', '–º–µ–Ω—é'))
async def start_command(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ],
        [
            types.InlineKeyboardButton(text="üé≤ –î–µ–π—Å—Ç–≤–∏—è", callback_data="actions"),
            types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ])
    await message.reply("üëä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data == "profile":
        await profile(callback.message)
    elif callback.data == "stats":
        await show_stats(callback.message)
    elif callback.data == "actions":
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üçÜ –î—Ä–æ—á–∏—Ç—å", callback_data="dick"),
                types.InlineKeyboardButton(text="üçà –ñ–º—è–∫–∞—Ç—å", callback_data="boobs")
            ],
            [
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
            ]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    elif callback.data == "settings":
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üá∑üá∫ RU", callback_data="lang_ru"),
                types.InlineKeyboardButton(text="üá¨üáß EN", callback_data="lang_en")
            ],
            [
                types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu")
            ]
        ])
        await callback.message.edit_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
    elif callback.data == "menu":
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ],
            [
                types.InlineKeyboardButton(text="üé≤ –î–µ–π—Å—Ç–≤–∏—è", callback_data="actions"),
                types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ]
        ])
        await callback.message.edit_text("üëä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    elif callback.data.startswith("lang_"):
        lang = callback.data.split("_")[1]
        user_languages[callback.from_user.id] = lang
        await callback.answer(f"‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang.upper()}")
        await callback.message.edit_text("‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    elif callback.data in ["dick", "boobs"]:
        if callback.data == "dick":
            await grow_dick(callback.message)
        else:
            await grow_boobs(callback.message)
    await callback.answer()

@dp.message(Command('help'))
async def help_command(message: types.Message):
    help_text = """
üí´ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/profile - —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
/top - —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/marry - –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è
/clan - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–º
/pet - –ø–∏—Ç–æ–º–µ—Ü
/shop - –º–∞–≥–∞–∑–∏–Ω
/inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/achievements - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/roll - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
/say - —Å–∫–∞–∑–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
/me - –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
/report - –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üîû NSFW –∫–æ–º–∞–Ω–¥—ã:
/otlizat - –æ—Ç–ª–∏–∑–∞—Ç—å
/fuck - –≤—ã–µ–±–∞—Ç—å
/kiss - –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å
/hug - –æ–±–Ω—è—Ç—å

üëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/ban - –∑–∞–±–∞–Ω–∏—Ç—å
/unban - —Ä–∞–∑–±–∞–Ω–∏—Ç—å
/warn - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/unwarn - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/mute - –∑–∞–º—É—Ç–∏—Ç—å
/unmute - —Ä–∞–∑–º—É—Ç–∏—Ç—å
/kick - –∫–∏–∫–Ω—É—Ç—å
"""
    await message.reply(help_text)

@dp.message(lambda msg: msg.text and msg.text.lower().startswith('–Ω–∞–≥—Ä–∞–¥–∏—Ç—å'))
async def reward_user(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥–∏—Ç—å")

    reward_text = message.text[9:].strip()  # Remove "–Ω–∞–≥—Ä–∞–¥–∏—Ç—å" from the start
    if not reward_text:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–≥—Ä–∞–¥—ã")

    user_id = message.reply_to_message.from_user.id
    if user_id not in user_rewards:
        user_rewards[user_id] = []

    user_rewards[user_id].append(reward_text)
    await message.reply(f"‚ú® –ù–∞–≥—Ä–∞–¥–∞ '{reward_text}' –≤—ã–¥–∞–Ω–∞!")

@dp.message(lambda msg: msg.text and msg.text.lower().startswith('–ø–æ–≥–æ–¥–∞'))
async def weather_command(message: types.Message):
    city = message.text[7:].strip()  # Remove "–ø–æ–≥–æ–¥–∞ " from the start
    if not city:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")

    weather_text = await get_weather(city)
    await message.reply(weather_text)

@dp.message(Command('profile'))
async def profile(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {
            'messages': 0,
            'karma': 0,
            'coins': 0,
            'level': 1,
            'exp': 0,
            'married_to': None,
            'clan': None,
            'achievements': []
        }

    user = users_db[user_id]
    text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {message.from_user.first_name}:\n"
    text += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {user['messages']}\n"
    text += f"üí∞ –ú–æ–Ω–µ—Ç: {user['coins']}\n"
    text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {user['level']}\n"
    text += f"‚≠êÔ∏è –û–ø—ã—Ç: {user['exp']}/100\n"
    text += f"üíï –ë—Ä–∞–∫: {user['married_to'] or '–°–≤–æ–±–æ–¥–µ–Ω(–∞)'}\n"
    text += f"üë• –ö–ª–∞–Ω: {user['clan'] or '–ù–µ—Ç'}\n"

    # Add rewards
    if message.from_user.id in user_rewards and user_rewards[message.from_user.id]:
        text += "\nüèÜ –ù–∞–≥—Ä–∞–¥—ã:\n"
        for reward in user_rewards[message.from_user.id]:
            text += f"‚Ä¢ {reward}\n"

    stats_image = await generate_stats_image(user)
    await message.reply_photo(photo=types.BufferedInputFile(stats_image.getvalue(), filename="profile.png"), caption=text)

@dp.message(Command(commands=['otlizat', 'fuck', 'kiss', 'hug']))
async def nsfw_action(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, —Å –∫–µ–º —Ö–æ—á–µ—à—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!")

    action = message.text.split('@')[0][1:]
    actions = {
        'otlizat': '–æ—Ç–ª–∏–∑–∞–ª(–∞) üëÖ',
        'fuck': '–≤—ã–µ–±–∞–ª(–∞) üçÜ',
        'kiss': '–ø–æ—Ü–µ–ª–æ–≤–∞–ª(–∞) üíã',
        'hug': '–æ–±–Ω—è–ª(–∞) ü§ó'
    }

    user1 = message.from_user.first_name
    user2 = message.reply_to_message.from_user.first_name

    await message.reply(f"üíï {user1} {actions[action]} {user2}")

@dp.message(Command('marry'))
async def marry(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–º—É —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!")

    user1_id = message.from_user.id
    user2_id = message.reply_to_message.from_user.id

    if user1_id == user2_id:
        return await message.reply("–ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ!")

    if user1_id in marriages or user2_id in marriages:
        return await message.reply("–ö—Ç–æ-—Ç–æ —É–∂–µ –≤ –±—Ä–∞–∫–µ!")

    marriages[user1_id] = user2_id
    marriages[user2_id] = user1_id

    users_db[user1_id]['married_to'] = message.reply_to_message.from_user.first_name
    users_db[user2_id]['married_to'] = message.from_user.first_name

    await message.reply(f"üíï {message.from_user.first_name} –∏ {message.reply_to_message.from_user.first_name} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!")

@dp.message(Command('clan'))
async def clan(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) == 1:
        return await message.reply("""
üõ° –ö–æ–º–∞–Ω–¥—ã –∫–ª–∞–Ω–∞:
/clan create [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω
/clan info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ
/clan join [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω
/clan leave - –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω
""")

    action = args[1]

    if action == "create" and len(args) > 2:
        clan_name = args[2]
        if clan_name in clans:
            return await message.reply("–¢–∞–∫–æ–π –∫–ª–∞–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

        clans[clan_name] = {
            'leader': user_id,
            'members': [user_id],
            'level': 1,
            'exp': 0
        }
        users_db[user_id]['clan'] = clan_name
        await message.reply(f"üõ° –ö–ª–∞–Ω {clan_name} —Å–æ–∑–¥–∞–Ω!")

@dp.message(Command('pet'))
async def pet(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pets:
        pets[user_id] = {
            'name': None,
            'type': None,
            'level': 1,
            'hunger': 100,
            'happiness': 100
        }

    pet = pets[user_id]
    if not pet['name']:
        return await message.reply("""
üêæ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞! –í—ã–±–µ—Ä–∏ –ø–∏—Ç–æ–º—Ü–∞:
/pet buy cat - –∫—É–ø–∏—Ç—å –∫–æ—Ç–∞
/pet buy dog - –∫—É–ø–∏—Ç—å —Å–æ–±–∞–∫—É
/pet buy hamster - –∫—É–ø–∏—Ç—å —Ö–æ–º—è–∫–∞
""")

    text = f"üêæ –¢–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü {pet['name']}:\n"
    text += f"–¢–∏–ø: {pet['type']}\n"
    text += f"–£—Ä–æ–≤–µ–Ω—å: {pet['level']}\n"
    text += f"–ì–æ–ª–æ–¥: {pet['hunger']}/100\n"
    text += f"–°—á–∞—Å—Ç—å–µ: {pet['happiness']}/100"

    await message.reply(text)

@dp.message(Command('roll'))
async def roll(message: types.Message):
    number = random.randint(1, 100)
    await message.reply(f"üé≤ {message.from_user.first_name} –≤—ã–±—Ä–æ—Å–∏–ª(–∞): {number}")

@dp.message(Command('say'))
async def say(message: types.Message):
    text = message.text.replace('/say ', '', 1)
    if text:
        await message.delete()
        await message.answer(text)

async def check_cooldown(user_id: int, action: str = None) -> bool:
    current_time = time.time()

    if action:
        last_action = action_cooldowns[user_id][action]
        if current_time - last_action < ACTION_COOLDOWN:
            minutes_left = int((ACTION_COOLDOWN - (current_time - last_action)) / 60)
            return False, f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes_left} –º–∏–Ω—É—Ç"
        action_cooldowns[user_id][action] = current_time
    else:
        last_message = message_cooldowns[user_id]
        if current_time - last_message < MESSAGE_COOLDOWN:
            return False, "üö´ –ù–µ —Å–ø–∞–º—å—Ç–µ"
        message_cooldowns[user_id] = current_time

    return True, None

@dp.message(Command("–∫–æ–º–∞–Ω–¥—ã", "commands", "help", "–ø–æ–º–æ—â—å"))
@dp.message(Command("langhuy"))
async def set_language(message: types.Message):
    try:
        lang = message.text.split()[1].lower()
        if lang not in ['ru', 'en']:
            await message.reply("‚ùå Supported languages: ru, en")
            return

        user_languages[message.from_user.id] = lang
        await message.reply(f"‚úÖ Language set to: {lang.upper()}")
    except:
        await message.reply("‚ùå Usage: /langhuy [ru/en]")

async def commands_list(message: types.Message):
    text = """
üìã –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

üë§ –ü—Ä–æ—Ñ–∏–ª—å:
—Å—Ç–∞—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
–¥—Ä–æ—á - —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä
–∂–º—è–∫ - —É–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä—É–¥—å
—Ç–æ–ø —Ö—É–µ–≤ - —Ç–æ–ø –ø–æ —Ä–∞–∑–º–µ—Ä—É

üí¨ –û–±—â–µ–Ω–∏–µ:
/me <–¥–µ–π—Å—Ç–≤–∏–µ> - –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
/say <—Ç–µ–∫—Å—Ç> - —Å–∫–∞–∑–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞

üíï –û—Ç–Ω–æ—à–µ–Ω–∏—è:
/marry - –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è
/kiss - –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å
/hug - –æ–±–Ω—è—Ç—å

üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:
/roll - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
/pet - –ø–∏—Ç–æ–º–µ—Ü
/clan - –∫–ª–∞–Ω

üõ° –ú–æ–¥–µ—Ä–∞—Ü–∏—è:
/warn - –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/unwarn - —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
/ban - –∑–∞–±–∞–Ω–∏—Ç—å
/unban - —Ä–∞–∑–±–∞–Ω–∏—Ç—å
"""
    msg = await message.reply(text)
    await asyncio.sleep(30)
    await msg.delete()

@dp.message(lambda msg: msg.text and msg.text.lower() in ['—Å—Ç–∞—Ç', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç–∞', 'stat', 'stats'])
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    try:
        if user_id not in users_db:
            users_db[user_id] = {
                'messages': 0,
                'warns': 0,
                'karma': 0,
                'dick_size': random.randint(1, 30),
                'boobs_size': random.randint(1, 5),
                'level': 1,
                'exp': 0,
                'coins': 0
            }

        stats = users_db[user_id]
        
        # Create stats image
        plt.clf()
        plt.style.use('dark_background')
        fig = plt.figure(figsize=(10, 6))
        
        # User info at the top
        plt.suptitle(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {message.from_user.first_name}", fontsize=16)
        plt.figtext(0.02, 0.98, f"–£—Ä–æ–≤–µ–Ω—å: {stats['level']}", fontsize=12)
        plt.figtext(0.3, 0.98, f"–°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}", fontsize=12)
        
        # Main stats
        plt.subplot(2, 2, 1)
        plt.bar(['–û–ø—ã—Ç'], [stats['exp']], color='#00ff00')
        plt.title('–û–ø—ã—Ç –¥–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è')
        
        plt.subplot(2, 2, 2)
        plt.bar(['–ö–∞—Ä–º–∞'], [stats['karma']], color='#ff00ff')
        plt.title('–ö–∞—Ä–º–∞')
        
        plt.subplot(2, 2, 3)
        plt.bar(['üçÜ'], [stats['dick_size']], color='#ff0000')
        plt.title('–†–∞–∑–º–µ—Ä')
        
        plt.subplot(2, 2, 4)
        plt.bar(['üçà'], [stats['boobs_size']], color='#ff69b4')
        plt.title('–ì—Ä—É–¥—å')
        
        plt.tight_layout()
        buf = io.BytesIO()
        plt.savefig(buf, format='png', facecolor='#36393F', bbox_inches='tight')
        buf.seek(0)
        
        # Get user's position in top
        msg_top = sorted(users_db.items(), key=lambda x: x[1].get('messages', 0), reverse=True)
        position = next(i for i, (uid, _) in enumerate(msg_top, 1) if uid == user_id)
        
        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {message.from_user.first_name}\n"
        text += f"üëë –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: #{position}\n"
        text += f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages']}\n"
        text += f"‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: {stats['level']}\n"
        text += f"üí´ –û–ø—ã—Ç: {stats['exp']}/100"
        
        await message.reply_photo(photo=types.BufferedInputFile(buf.getvalue(), filename="stats.png"), caption=text)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# Duel system
duel_stats = {}
aim_stats = {}

@dp.message(lambda msg: msg.text and msg.text.lower() in ['—Ç–æ–ø', 'top'])
async def show_top(message: types.Message):
    try:
        # Sort by messages
        msg_top = sorted(users_db.items(), key=lambda x: x[1].get('messages', 0), reverse=True)[:5]
        # Sort by dick size
        dick_top = sorted(users_db.items(), key=lambda x: x[1].get('dick_size', 0), reverse=True)[:5]
        # Sort by duel wins
        duel_top = sorted(duel_stats.items(), key=lambda x: x[1].get('wins', 0), reverse=True)[:5]

        text = "üìä –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        text += "üí¨ –ü–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:\n"
        for i, (user_id, stats) in enumerate(msg_top, 1):
            try:
                user = await bot.get_chat_member(message.chat.id, user_id)
                text += f"{i}. {user.user.first_name}: {stats.get('messages', 0)}\n"
            except: continue

        text += "\nüçÜ –ü–æ —Ä–∞–∑–º–µ—Ä—É:\n"
        for i, (user_id, stats) in enumerate(dick_top, 1):
            try:
                user = await bot.get_chat_member(message.chat.id, user_id)
                text += f"{i}. {user.user.first_name}: {stats.get('dick_size', 0)}—Å–º\n"
            except: continue

        text += "\nüéØ –ü–æ –¥—É—ç–ª—è–º:\n"
        for i, (user_id, stats) in enumerate(duel_top, 1):
            try:
                user = await bot.get_chat_member(message.chat.id, user_id)
                text += f"{i}. {user.user.first_name}: {stats.get('wins', 0)} –ø–æ–±–µ–¥\n"
            except: continue

        await message.answer(text)
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message(Command("–¥—É—ç–ª—å", "duel"))
async def duel_command(message: types.Message):
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç–µ –Ω–∞ –¥—É—ç–ª—å!")

    user1_id = message.from_user.id
    user2_id = message.reply_to_message.from_user.id

    if user1_id == user2_id:
        return await message.reply("–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"duel_accept_{user1_id}"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"duel_decline_{user1_id}")
        ]
    ])
    
    await message.reply(
        f"üéØ {message.reply_to_message.from_user.first_name}, –≤–∞—Å –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –¥—É—ç–ª—å!",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith('duel_'))
async def duel_callback(callback: types.CallbackQuery):
    action, user1_id = callback.data.split('_')[1:]
    user1_id = int(user1_id)
    user2_id = callback.from_user.id

    if action == "decline":
        await callback.message.edit_text("üè≥Ô∏è –î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
        return

    if action == "accept":
        # Initialize aim bonus
        aim_stats[user1_id] = 0
        aim_stats[user2_id] = 0

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üéØ –ü—Ä–∏—Ü–µ–ª–∏—Ç—å—Å—è", callback_data=f"aim_{user1_id}_{user2_id}"),
                types.InlineKeyboardButton(text="üî´ –°—Ç—Ä–µ–ª—è—Ç—å", callback_data=f"shoot_{user1_id}_{user2_id}")
            ],
            [
                types.InlineKeyboardButton(text="üí® –°–±–∏—Ç—å –ø—Ä–∏—Ü–µ–ª", callback_data=f"disturb_{user1_id}_{user2_id}")
            ]
        ])
        
        await callback.message.edit_text(
            "üéØ –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!\n–ü—Ä–∏—Ü–µ–ª—å—Ç–µ—Å—å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å—Ç—Ä–µ–ª—è–π—Ç–µ!",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data.startswith(('aim_', 'shoot_', 'disturb_')))
async def duel_action(callback: types.CallbackQuery):
    action, user1_id, user2_id = callback.data.split('_')
    user1_id = int(user1_id)
    user2_id = int(user2_id)
    current_user = callback.from_user.id

    if current_user not in [user1_id, user2_id]:
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –¥—É—ç–ª–∏!")
        return

    if action == "aim":
        aim_stats[current_user] = min(aim_stats.get(current_user, 0) + 3, 30)  # Max 30% bonus
        await callback.answer(f"–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ 3%! –¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å: {aim_stats[current_user]}%")
        return

    if action == "disturb":
        opponent = user2_id if current_user == user1_id else user1_id
        if aim_stats.get(opponent, 0) > 0:
            aim_stats[opponent] = max(0, aim_stats[opponent] - 5)
            await callback.answer(f"–í—ã —Å–±–∏–ª–∏ –ø—Ä–∏—Ü–µ–ª –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! –ï–≥–æ –±–æ–Ω—É—Å: {aim_stats[opponent]}%")
        else:
            await callback.answer("–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–∞ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è!")
        return

    if action == "shoot":
        shooter = current_user
        target = user2_id if shooter == user1_id else user1_id
        
        base_chance = 50
        aim_bonus = aim_stats.get(shooter, 0)
        hit_chance = min(95, base_chance + aim_bonus)  # Max 95% chance
        
        if random.randint(1, 100) <= hit_chance:
            # Update stats
            if shooter not in duel_stats:
                duel_stats[shooter] = {'wins': 0, 'losses': 0}
            if target not in duel_stats:
                duel_stats[target] = {'wins': 0, 'losses': 0}
            
            duel_stats[shooter]['wins'] = duel_stats[shooter].get('wins', 0) + 1
            duel_stats[target]['losses'] = duel_stats[target].get('losses', 0) + 1

            shooter_name = callback.from_user.first_name
            await callback.message.edit_text(f"üí• {shooter_name} –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ –¥—É—ç–ª–∏!")
        else:
            await callback.message.edit_text("üí® –ü—Ä–æ–º–∞—Ö! –î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞!")

        # Reset aim stats
        aim_stats[user1_id] = 0
        aim_stats[user2_id] = 0

@dp.message(lambda msg: msg.text and msg.text.lower() in ['–¥—Ä–æ—á', '–ø–æ–¥—Ä–æ—á–∏—Ç—å', 'fap', 'masturbate'])
async def grow_dick(message: types.Message):
    user_id = message.from_user.id

    try:
        # Check cooldown
        can_proceed, error_msg = await check_cooldown(user_id, 'dick')
        if not can_proceed:
            msg = await message.reply(error_msg)
            await asyncio.sleep(2)
            await msg.delete()
            return

        if user_id not in users_db:
            users_db[user_id] = {'dick_size': random.randint(1, 30)}

        growth = random.randint(-2, 5)
        users_db[user_id]['dick_size'] = max(1, users_db[user_id].get('dick_size', 1) + growth)

        if growth > 0:
            await message.answer(f"üçÜ +{growth}—Å–º! –¢–µ–ø–µ—Ä—å/Now: {users_db[user_id]['dick_size']}—Å–º")
        else:
            await message.answer(f"üò¢ {growth}—Å–º! –¢–µ–ø–µ—Ä—å/Now: {users_db[user_id]['dick_size']}—Å–º")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞/Error occurred")

@dp.message(lambda msg: msg.text and msg.text.lower() in ['–∂–º—è–∫', '–º–∞—Å—Å–∞–∂', 'squeeze', 'massage'])
async def grow_boobs(message: types.Message):
    user_id = message.from_user.id

    try:
        # Check cooldown
        can_proceed, error_msg = await check_cooldown(user_id, 'boobs')
        if not can_proceed:
            msg = await message.reply(error_msg)
            await asyncio.sleep(2)
            await msg.delete()
            return

        if user_id not in users_db:
            users_db[user_id] = {'boobs_size': random.randint(1, 5)}

        growth = random.randint(-1, 2)
        users_db[user_id]['boobs_size'] = max(1, users_db[user_id].get('boobs_size', 1) + growth)

        size_str = "üçà" * users_db[user_id]['boobs_size']
        msg = await message.reply(f"{'üíó +' if growth > 0 else 'üò¢ '}{growth}! –¢–µ–ø–µ—Ä—å: {size_str}")
        await asyncio.sleep(5)
        await msg.delete()
    except Exception as e:
        msg = await message.reply("‚ùå –û—à–∏–±–∫–∞")
        await asyncio.sleep(2)
        await msg.delete()

@dp.message()
async def handle_messages(message: types.Message):
    if message.text is None:
        return
    user_id = message.from_user.id

    # Check cooldown
    can_proceed, error_msg = await check_cooldown(user_id)
    if not can_proceed:
        msg = await message.reply(error_msg)
        await asyncio.sleep(2)
        await msg.delete()
        return

    try:
        if user_id not in users_db:
            users_db[user_id] = {
                'messages': 0,
                'warns': 0,
                'karma': 0,
                'coins': 0,
                'level': 1,
                'exp': 0,
                'dick_size': random.randint(1, 30),
                'boobs_size': random.randint(1, 5)
            }

        users_db[user_id]['messages'] = users_db[user_id].get('messages', 0) + 1
        users_db[user_id]['exp'] = users_db[user_id].get('exp', 0) + random.randint(1, 5)
    except Exception as e:
        print(f"Error in handle_messages: {e}")

    if users_db[user_id]['exp'] >= 100:
        users_db[user_id]['level'] += 1
        users_db[user_id]['exp'] = 0
        achievement = f"üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç {users_db[user_id]['level']} —É—Ä–æ–≤–µ–Ω—å!"
        if achievement not in users_db[user_id].get('achievements', []):
            users_db[user_id].setdefault('achievements', []).append(achievement)
        await message.reply(f"üéâ {message.from_user.first_name} –¥–æ—Å—Ç–∏–≥ {users_db[user_id]['level']} —É—Ä–æ–≤–Ω—è!")

    if random.random() < 0.1:
        coins = random.randint(1, 10)
        users_db[user_id]['coins'] += coins
        await message.reply(f"üí∞ +{coins} –º–æ–Ω–µ—Ç!")

async def is_admin(user_id: int, chat_id: int) -> bool:
    if chat_id not in admins:
        chat_admins = await bot.get_chat_administrators(chat_id)
        admins[chat_id] = [admin.user.id for admin in chat_admins]
    return user_id in admins[chat_id]

@dp.message(Command(commands=['ban', '–±–∞–Ω']))
async def ban_user(message: types.Message):
    if not await is_admin(message.from_user.id, message.chat.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å!")

    try:
        await message.chat.ban(message.reply_to_message.from_user.id)
        await message.reply(f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} –∑–∞–±–∞–Ω–µ–Ω!")
    except Exception as e:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command(commands=['unban', '—Ä–∞–∑–±–∞–Ω']))
async def unban_user(message: types.Message):
    if not await is_admin(message.from_user.id, message.chat.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    try:
        user_id = int(message.text.split()[1])
        await message.chat.unban(user_id)
        await message.reply("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!")
    except:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command(commands=['mute', '–º—É—Ç']))
async def mute_user(message: types.Message):
    if not await is_admin(message.from_user.id, message.chat.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    try:
        duration = int(message.text.split()[1]) * 60  # minutes to seconds
        until_date = datetime.now() + timedelta(seconds=duration)
        await message.chat.restrict(
            message.reply_to_message.from_user.id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await message.reply(f"ü§ê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration//60} –º–∏–Ω—É—Ç!")
    except:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö!")

@dp.message(Command(commands=['unmute', '—Ä–∞–∑–º—É—Ç']))
async def unmute_user(message: types.Message):
    if not await is_admin(message.from_user.id, message.chat.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    try:
        await message.chat.restrict(
            message.reply_to_message.from_user.id,
            permissions=types.ChatPermissions(can_send_messages=True)
        )
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} —Ä–∞–∑–º—É—á–µ–Ω!")
    except:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.message(Command(commands=['warn', '–≤–∞—Ä–Ω']))
async def warn_user(message: types.Message):
    if not await is_admin(message.from_user.id, message.chat.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    user_id = message.reply_to_message.from_user.id
    if user_id not in warns:
        warns[user_id] = 0
    warns[user_id] += 1

    if warns[user_id] >= 3:
        try:
            await message.chat.ban(user_id)
            await message.reply(f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
            warns[user_id] = 0
        except:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    else:
        await message.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.first_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! ({warns[user_id]}/3)")

@dp.message(Command(commands=['unwarn', '—É–Ω–≤–∞—Ä–Ω']))
async def unwarn_user(message: types.Message):
    if not await is_admin(message.from_user.id, message.chat.id):
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

    user_id = message.reply_to_message.from_user.id
    if user_id in warns and warns[user_id] > 0:
        warns[user_id] -= 1
        await message.reply(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.reply_to_message.from_user.first_name} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! ({warns[user_id]}/3)")
    else:
        await message.reply("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
